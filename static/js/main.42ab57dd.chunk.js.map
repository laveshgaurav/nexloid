{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["islocahost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Navigation","lazy","HomePage","ServicePage","AboutUsPage","App","basename","process","fallback","className","path","exact","component","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+KAYMA,EAAaC,QACY,iBAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,kDC5F3DC,EAAaC,gBAAK,kBAAM,sDACxBC,EAAWD,gBAAK,kBAAM,sDACtBE,EAAcF,gBAAK,kBAAM,sDACzBG,EAAcH,gBAAK,kBAAM,gCA4BhBI,MAzBf,WACE,OAKE,aAJA,CAIC,IAAD,CAAQC,SAAUC,WAAlB,SACE,eAAC,WAAD,CACEC,SACE,qBAAKC,UAAU,mBAAf,SACE,qBAAKA,UAAU,aAHrB,UAOE,cAACT,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOU,KAAK,IAAIC,OAAK,EAACC,UAAWV,IACjC,cAAC,IAAD,CAAOQ,KAAK,WAAWC,OAAK,EAACC,UAAWT,IACxC,cAAC,IAAD,CAAOO,KAAK,WAAWC,OAAK,EAACC,UAAWR,aCtBlDS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFYnB,SAAkBnC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImC,IAAIX,WAAwB/B,OAAOC,SAAS0C,MACpDC,SAAW5C,OAAOC,SAAS2C,OAIvC,OAGF5C,OAAO6C,iBAAiB,QAAQ,WAC9B,IAAMxC,EAAK,UAAM0B,WAAN,sBAEPjC,IAgEV,SAAiCO,EAAOC,GAEtCwC,MAAMzC,EAAO,CACX0C,QAAS,CAAE,iBAAkB,YAE5BrC,MAAK,SAACsC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7C,UAAUC,cAAc6C,MAAM3C,MAAK,SAACC,GAClCA,EAAa2C,aAAa5C,MAAK,WAC7BV,OAAOC,SAASsD,eAKpBnD,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAqC,CAAwBnD,EAAOC,GAI/BC,UAAUC,cAAc6C,MAAM3C,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OElC/BE,K","file":"static/js/main.42ab57dd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst islocahost = Boolean(\r\n  window.location.hostname === \"34.71.25.223\" ||\r\n    // [::1] is the IPv6 34.71.25.223 address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered 34.71.25.223 for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (islocahost) {\r\n        // This is running on 34.71.25.223. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to 34.71.25.223, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not 34.71.25.223. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { lazy, Suspense } from \"react\";\nimport \"./App.css\";\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\n// import Loader from \"./components/Loader/Loader\";\nconst Navigation = lazy(() => import(\"./components/navigation/Navigation\"));\nconst HomePage = lazy(() => import(\"./pages/homePage/HomePage\"));\nconst ServicePage = lazy(() => import(\"./pages/servicePage/ServicePage\"));\nconst AboutUsPage = lazy(() => import(\"./pages/aboutUsPage/AboutUsPage\"));\nconst Loader = lazy(() => import(\"./components/Loader/Loader\"));\n\nfunction App() {\n  return (\n    // <React.Fragment>\n    //   <Navigation />\n    //   <HomePage />\n    // </React.Fragment>\n    <Router basename={process.env.PUBLIC_URL}>\n      <Suspense\n        fallback={\n          <div className=\"Loader-container\">\n            <div className=\"circle\"></div>\n          </div>\n        }\n      >\n        <Navigation />\n        <Switch>\n          <Route path=\"/\" exact component={HomePage} />\n          <Route path=\"/service\" exact component={ServicePage} />\n          <Route path=\"/aboutUs\" exact component={AboutUsPage} />\n        </Switch>\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.register();\n\n// reportWebVitals();\n"],"sourceRoot":""}